// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Not(in=sel[0], out=rsel2);
    Not(in=sel[1], out=rsel1);
    Not(in=sel[2], out=rsel0);

    And(a=rsel0, b=rsel1, out=ta);
    And(a=ta, b=rsel2, out=da);

    And(a=rsel0, b=rsel1, out=tb);
    And(a=tb, b=sel[0], out=db);

    And(a=rsel0, b=sel[1], out=tc);
    And(a=tc, b=rsel2, out=dc);

    And(a=rsel0, b=sel[1], out=td);
    And(a=td, b=sel[0], out=dd);

    And(a=sel[2], b=rsel1, out=te);
    And(a=te, b=rsel2, out=de);

    And(a=sel[2], b=rsel1, out=tf);
    And(a=tf, b=sel[0], out=df);

    And(a=sel[2], b=sel[1], out=tg);
    And(a=tg, b=rsel2, out=dg);

    And(a=sel[2], b=sel[1], out=th);
    And(a=th, b=sel[0], out=dh);

    Nand(a=da, b=db, out=w1);
    Xor(a=dc, b=dd, out=w2);
    Nand(a=de, b=df, out=w3);
    Xor(a=dg, b=dh, out=w4);
    And(a=w1, b=w2, out=w5);
    And(a=w3, b=w4, out=w6);
    Xor(a=w5, b=w5, out=w7);
    Xor(a=w7, b=rsel0, out=w8a);
    Not(in=w8a, out=w8);

    Mux(a=a[0], b=b[0], sel=db, out=aw1);
    Mux(a=c[0], b=d[0], sel=dd, out=aw2);
    Mux(a=e[0], b=f[0], sel=df, out=aw3);
    Mux(a=g[0], b=h[0], sel=dh, out=aw4);
    Mux(a=aw1, b=aw2, sel=w5, out=aw5);
    Mux(a=aw3, b=aw4, sel=w6, out=aw6);
    Mux(a=aw5, b=aw6, sel=w8, out=out[0]);

    Mux(a=a[1], b=b[1], sel=db, out=bw1);
    Mux(a=c[1], b=d[1], sel=dd, out=bw2);
    Mux(a=e[1], b=f[1], sel=df, out=bw3);
    Mux(a=g[1], b=h[1], sel=dh, out=bw4);
    Mux(a=bw1, b=bw2, sel=w5, out=bw5);
    Mux(a=bw3, b=bw4, sel=w6, out=bw6);
    Mux(a=bw5, b=bw6, sel=w8, out=out[1]);

    Mux(a=a[2], b=b[2], sel=db, out=cw1);
    Mux(a=c[2], b=d[2], sel=dd, out=cw2);
    Mux(a=e[2], b=f[2], sel=df, out=cw3);
    Mux(a=g[2], b=h[2], sel=dh, out=cw4);
    Mux(a=cw1, b=cw2, sel=w5, out=cw5);
    Mux(a=cw3, b=cw4, sel=w6, out=cw6);
    Mux(a=cw5, b=cw6, sel=w8, out=out[2]);

    Mux(a=a[3], b=b[3], sel=db, out=dw1);
    Mux(a=c[3], b=d[3], sel=dd, out=dw2);
    Mux(a=e[3], b=f[3], sel=df, out=dw3);
    Mux(a=g[3], b=h[3], sel=dh, out=dw4);
    Mux(a=dw1, b=dw2, sel=w5, out=dw5);
    Mux(a=dw3, b=dw4, sel=w6, out=dw6);
    Mux(a=dw5, b=dw6, sel=w8, out=out[3]);

    Mux(a=a[4], b=b[4], sel=db, out=ew1);
    Mux(a=c[4], b=d[4], sel=dd, out=ew2);
    Mux(a=e[4], b=f[4], sel=df, out=ew3);
    Mux(a=g[4], b=h[4], sel=dh, out=ew4);
    Mux(a=ew1, b=ew2, sel=w5, out=ew5);
    Mux(a=ew3, b=ew4, sel=w6, out=ew6);
    Mux(a=ew5, b=ew6, sel=w8, out=out[4]);

    Mux(a=a[5], b=b[5], sel=db, out=fw1);
    Mux(a=c[5], b=d[5], sel=dd, out=fw2);
    Mux(a=e[5], b=f[5], sel=df, out=fw3);
    Mux(a=g[5], b=h[5], sel=dh, out=fw4);
    Mux(a=fw1, b=fw2, sel=w5, out=fw5);
    Mux(a=fw3, b=fw4, sel=w6, out=fw6);
    Mux(a=fw5, b=fw6, sel=w8, out=out[5]);

    Mux(a=a[6], b=b[6], sel=db, out=gw1);
    Mux(a=c[6], b=d[6], sel=dd, out=gw2);
    Mux(a=e[6], b=f[6], sel=df, out=gw3);
    Mux(a=g[6], b=h[6], sel=dh, out=gw4);
    Mux(a=gw1, b=gw2, sel=w5, out=gw5);
    Mux(a=gw3, b=gw4, sel=w6, out=gw6);
    Mux(a=gw5, b=gw6, sel=w8, out=out[6]);

    Mux(a=a[7], b=b[7], sel=db, out=hw1);
    Mux(a=c[7], b=d[7], sel=dd, out=hw2);
    Mux(a=e[7], b=f[7], sel=df, out=hw3);
    Mux(a=g[7], b=h[7], sel=dh, out=hw4);
    Mux(a=hw1, b=hw2, sel=w5, out=hw5);
    Mux(a=hw3, b=hw4, sel=w6, out=hw6);
    Mux(a=hw5, b=hw6, sel=w8, out=out[7]);

    Mux(a=a[8], b=b[8], sel=db, out=iw1);
    Mux(a=c[8], b=d[8], sel=dd, out=iw2);
    Mux(a=e[8], b=f[8], sel=df, out=iw3);
    Mux(a=g[8], b=h[8], sel=dh, out=iw4);
    Mux(a=iw1, b=iw2, sel=w5, out=iw5);
    Mux(a=iw3, b=iw4, sel=w6, out=iw6);
    Mux(a=iw5, b=iw6, sel=w8, out=out[8]);

    Mux(a=a[9], b=b[9], sel=db, out=jw1);
    Mux(a=c[9], b=d[9], sel=dd, out=jw2);
    Mux(a=e[9], b=f[9], sel=df, out=jw3);
    Mux(a=g[9], b=h[9], sel=dh, out=jw4);
    Mux(a=jw1, b=jw2, sel=w5, out=jw5);
    Mux(a=jw3, b=jw4, sel=w6, out=jw6);
    Mux(a=jw5, b=jw6, sel=w8, out=out[9]);

    Mux(a=a[10], b=b[10], sel=db, out=kw1);
    Mux(a=c[10], b=d[10], sel=dd, out=kw2);
    Mux(a=e[10], b=f[10], sel=df, out=kw3);
    Mux(a=g[10], b=h[10], sel=dh, out=kw4);
    Mux(a=kw1, b=kw2, sel=w5, out=kw5);
    Mux(a=kw3, b=kw4, sel=w6, out=kw6);
    Mux(a=kw5, b=kw6, sel=w8, out=out[10]);

    Mux(a=a[11], b=b[11], sel=db, out=lw1);
    Mux(a=c[11], b=d[11], sel=dd, out=lw2);
    Mux(a=e[11], b=f[11], sel=df, out=lw3);
    Mux(a=g[11], b=h[11], sel=dh, out=lw4);
    Mux(a=lw1, b=lw2, sel=w5, out=lw5);
    Mux(a=lw3, b=lw4, sel=w6, out=lw6);
    Mux(a=lw5, b=lw6, sel=w8, out=out[11]);

    Mux(a=a[12], b=b[12], sel=db, out=mw1);
    Mux(a=c[12], b=d[12], sel=dd, out=mw2);
    Mux(a=e[12], b=f[12], sel=df, out=mw3);
    Mux(a=g[12], b=h[12], sel=dh, out=mw4);
    Mux(a=mw1, b=mw2, sel=w5, out=mw5);
    Mux(a=mw3, b=mw4, sel=w6, out=mw6);
    Mux(a=mw5, b=mw6, sel=w8, out=out[12]);

    Mux(a=a[13], b=b[13], sel=db, out=nw1);
    Mux(a=c[13], b=d[13], sel=dd, out=nw2);
    Mux(a=e[13], b=f[13], sel=df, out=nw3);
    Mux(a=g[13], b=h[13], sel=dh, out=nw4);
    Mux(a=nw1, b=nw2, sel=w5, out=nw5);
    Mux(a=nw3, b=nw4, sel=w6, out=nw6);
    Mux(a=nw5, b=nw6, sel=w8, out=out[13]);

    Mux(a=a[14], b=b[14], sel=db, out=ow1);
    Mux(a=c[14], b=d[14], sel=dd, out=ow2);
    Mux(a=e[14], b=f[14], sel=df, out=ow3);
    Mux(a=g[14], b=h[14], sel=dh, out=ow4);
    Mux(a=ow1, b=ow2, sel=w5, out=ow5);
    Mux(a=ow3, b=ow4, sel=w6, out=ow6);
    Mux(a=ow5, b=ow6, sel=w8, out=out[14]);

    Mux(a=a[15], b=b[15], sel=db, out=pw1);
    Mux(a=c[15], b=d[15], sel=dd, out=pw2);
    Mux(a=e[15], b=f[15], sel=df, out=pw3);
    Mux(a=g[15], b=h[15], sel=dh, out=pw4);
    Mux(a=pw1, b=pw2, sel=w5, out=pw5);
    Mux(a=pw3, b=pw4, sel=w6, out=pw6);
    Mux(a=pw5, b=pw6, sel=w8, out=out[15]);
}