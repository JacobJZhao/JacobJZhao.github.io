// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Not(in=sel[0], out=rsel0);
    Not(in=sel[1], out=rsel1);
    Not(in=sel[2], out=rsel2);

    And(a=rsel0, b=rsel1, out=ta);
    And(a=ta, b=rsel2, out=da);

    And(a=rsel0, b=rsel1, out=tb);
    And(a=tb, b=sel[2], out=db);

    And(a=rsel0, b=sel[1], out=tc);
    And(a=tc, b=rsel2, out=dc);

    And(a=rsel0, b=sel[1], out=td);
    And(a=td, b=sel[2], out=dd);

    And(a=sel[0], b=rsel1, out=te);
    And(a=te, b=rsel2, out=de);

    And(a=sel[0], b=rsel1, out=tf);
    And(a=tf, b=sel[2], out=df);

    And(a=sel[0], b=sel[1], out=tg);
    And(a=tg, b=rsel2, out=dg);

    And(a=sel[0], b=sel[1], out=th);
    And(a=th, b=sel[2], out=dh);

    And(a=a[0], b=da, out=aout0);
    And(a=a[1], b=da, out=aout1);
    And(a=a[2], b=da, out=aout2);
    And(a=a[3], b=da, out=aout3);
    And(a=a[4], b=da, out=aout4);
    And(a=a[5], b=da, out=aout5);
    And(a=a[6], b=da, out=aout6);
    And(a=a[7], b=da, out=aout7);
    And(a=a[8], b=da, out=aout8);
    And(a=a[9], b=da, out=aout9);
    And(a=a[10], b=da, out=aout10);
    And(a=a[11], b=da, out=aout11);
    And(a=a[12], b=da, out=aout12);
    And(a=a[13], b=da, out=aout13);
    And(a=a[14], b=da, out=aout14);
    And(a=a[15], b=da, out=aout15);

    And(a=b[0], b=db, out=bout0);
    And(a=b[1], b=db, out=bout1);
    And(a=b[2], b=db, out=bout2);
    And(a=b[3], b=db, out=bout3);
    And(a=b[4], b=db, out=bout4);
    And(a=b[5], b=db, out=bout5);
    And(a=b[6], b=db, out=bout6);
    And(a=b[7], b=db, out=bout7);
    And(a=b[8], b=db, out=bout8);
    And(a=b[9], b=db, out=bout9);
    And(a=b[10], b=db, out=bout10);
    And(a=b[11], b=db, out=bout11);
    And(a=b[12], b=db, out=bout12);
    And(a=b[13], b=db, out=bout13);
    And(a=b[14], b=db, out=bout14);
    And(a=b[15], b=db, out=bout15);

    And(a=c[0], b=dc, out=cout0);
    And(a=c[1], b=dc, out=cout1);
    And(a=c[2], b=dc, out=cout2);
    And(a=c[3], b=dc, out=cout3);
    And(a=c[4], b=dc, out=cout4);
    And(a=c[5], b=dc, out=cout5);
    And(a=c[6], b=dc, out=cout6);
    And(a=c[7], b=dc, out=cout7);
    And(a=c[8], b=dc, out=cout8);
    And(a=c[9], b=dc, out=cout9);
    And(a=c[10], b=dc, out=cout10);
    And(a=c[11], b=dc, out=cout11);
    And(a=c[12], b=dc, out=cout12);
    And(a=c[13], b=dc, out=cout13);
    And(a=c[14], b=dc, out=cout14);
    And(a=c[15], b=dc, out=cout15);

    And(a=d[0], b=dd, out=dout0);
    And(a=d[1], b=dd, out=dout1);
    And(a=d[2], b=dd, out=dout2);
    And(a=d[3], b=dd, out=dout3);
    And(a=d[4], b=dd, out=dout4);
    And(a=d[5], b=dd, out=dout5);
    And(a=d[6], b=dd, out=dout6);
    And(a=d[7], b=dd, out=dout7);
    And(a=d[8], b=dd, out=dout8);
    And(a=d[9], b=dd, out=dout9);
    And(a=d[10], b=dd, out=dout10);
    And(a=d[11], b=dd, out=dout11);
    And(a=d[12], b=dd, out=dout12);
    And(a=d[13], b=dd, out=dout13);
    And(a=d[14], b=dd, out=dout14);
    And(a=d[15], b=dd, out=dout15);

    And(a=e[0], b=de, out=eout0);
    And(a=e[1], b=de, out=eout1);
    And(a=e[2], b=de, out=eout2);
    And(a=e[3], b=de, out=eout3);
    And(a=e[4], b=de, out=eout4);
    And(a=e[5], b=de, out=eout5);
    And(a=e[6], b=de, out=eout6);
    And(a=e[7], b=de, out=eout7);
    And(a=e[8], b=de, out=eout8);
    And(a=e[9], b=de, out=eout9);
    And(a=e[10], b=de, out=eout10);
    And(a=e[11], b=de, out=eout11);
    And(a=e[12], b=de, out=eout12);
    And(a=e[13], b=de, out=eout13);
    And(a=e[14], b=de, out=eout14);
    And(a=e[15], b=de, out=eout15);
}